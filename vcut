#!/usr/bin/python3


import argparse
import os
from moviepy.editor import VideoFileClip

class CustomError(Exception):
    def __init__(self, error_msg):
        self.error_msg = error_msg

def getValue(unit):
    # Get time unit
    u = unit[-1:]
    if u not in ['s', 'm']:
        raise CustomError('Invalid unit')

    # Get value 
    v = unit[:-1]
    if not v.isdigit():
        raise CustomError('Invalid value within unit')
    v = int(unit[:-1])

    # return seconds
    if u == 's':
        return v
    elif u == 'm':
        return v * 60

def getList(duration, unit_value):
    count = int(duration // unit_value)
    res = []
    stt = 0

    for i in range(count):
        res.append([stt, stt + unit_value])
        stt += unit_value

    res.append([stt, duration])

    return res

def start(arguments):
    print('*****START PROCESSING*****')

    if not os.path.isfile(arguments.movie_file):
        raise CustomError('File not exist.')

    video = VideoFileClip(arguments.movie_file)
    current_path = os.getcwd()

    print('DURATION: {}s'.format(video.duration))
    print('CURRENT_PATH: {}'.format(current_path))

    # handle --cut-by-time
    if arguments.time:
        value_s = getValue(arguments.time)  # its unit is seconds
        range_list = getList(video.duration, value_s)

        video_name = "video-{}.mp4"
        count = 1

        for cut_data in range_list:
            cut = video.subclip(cut_data[0], cut_data[1])
            cut.write_videofile(video_name.format(count))
            print('* ' + video_name.format(count) + 'has done')

            count = count + 1

        print('* TOTAL FILE: ' + str(count))
        print('***** ALL DONE *****')

if __name__ == '__main__':
    parser = argparse.ArgumentParser(description='this tool used to cut mp4 video file.')

    # add required movie file parameter
    parser.add_argument('movie_file', help='the string of movie file to be handled.')

    # add mutually exclusively parameters group
    group = parser.add_mutually_exclusive_group()

    #1 add --cut-by-time to cut it ti equally parts
    group.add_argument('--cut-by-time', help='its value consist of a integer follow a time unit,such as s(seconds), m(minutes).eg: --cut-by-time=40s   --cut-by-time=30m', dest='time')


    # handle arguments
    arguments = parser.parse_args()

    # start handle
    start(arguments)
